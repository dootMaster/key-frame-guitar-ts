{"version":3,"sources":["components/form/helpers/notes.ts","components/form/Checkbox.tsx","components/form/helpers/formHelpers.ts","components/form/InputForm.tsx","components/fretboard/Fret.tsx","components/fretboard/GtrString.tsx","components/fretboard/Fretboard.tsx","components/fretboard/helpers/createFretboard.tsx","components/fretboard/helpers/stringDict.ts","components/form/StringQtySelect.tsx","components/form/helpers/defaultTunings.ts","components/TuningModal/SelectNote.tsx","components/TuningModal/TuningModal.tsx","components/SaveModal/SaveModal.tsx","App.tsx","components/appHelpers/appHelpers.ts","index.tsx"],"names":["flats","sharps","both","Checkbox","i","note","handleChange","cssAppend","checked","type","id","className","onChange","updateFretboardViaForm","fretboard","otherForm","updatedNotesState","key","currentForm","targetForm","forEach","gtrString","fret","dictIndex","display","Form","globalAccidental","form","setForm","setFretboard","useState","noteLabels","setNoteLabels","useEffect","handleAccidental","useCallback","position","map","item","index","copy","htmlFor","Fret","flat","sharp","toggleFret","j","onClick","GtrString","props","Fretboard","createFretboard","tuning","root","startNote","guitarString","length","push","createString","StringQtySelect","setTuning","standardTuning","changeStringAmount","event","newTuning","number","parseInt","returnsCommonTuningForStringQty","currentTarget","value","newFretboard","name","e","defaultValue","SelectNote","currentNote","labels","handleTuningChange","Array","from","keys","num","TuningModal","handleClose","show","showHideClassName","accidentalLabels","setAccidentalLabels","target","SaveModal","disable","save","load","deleteData","saveFileList","saveNameText","setSaveName","selectedSaveFile","setSelectedSaveFile","disabled","handleSaveFileSelect","newText","handleSaveNameText","App","setGlobalAccidental","fill","setCurrent","setTarget","showTuningModal","setShowTuningModal","showSaveModal","setShowSaveModal","Object","localStorage","filter","setSaveFileList","toggleTuningModal","toggleSaveModal","string","updateFretboardViaToggle","resetArray","includes","alert","saveObject","saveData","JSON","stringify","setItem","loadData","parse","getItem","removeItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.753f250d.chunk.js","sourcesContent":["const flats = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\r\nconst sharps = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\nconst both = ['C', 'C#/Db', 'D', 'D#/Eb', 'E', 'F', 'F#/Gb', 'G', 'G#/Ab', 'A', 'A#/Bb', 'B'];\r\n\r\nexport { flats, sharps, both }","import { CheckboxProps } from \"./FormTypes/FormTypes\";\r\n\r\nconst Checkbox = ({i, note, handleChange, cssAppend, checked=false}:CheckboxProps) => (\r\n  <input\r\n    type='checkbox'\r\n    id={note + cssAppend}\r\n    className={'checkbox-' + cssAppend + ' checkbox'}\r\n    onChange={() => {handleChange(i);}}\r\n    checked={checked}\r\n  />\r\n);\r\n\r\nexport default Checkbox;","type GtrString = {\r\n  display: string\r\n  dictIndex: number\r\n}\r\n\r\nconst updateFretboardViaForm = (fretboard:Array<GtrString[]>, otherForm:boolean[], updatedNotesState:boolean[], key:string) => {\r\n  let currentForm:boolean[] = updatedNotesState, targetForm:boolean[] = otherForm;\r\n  if (key === 'target') {\r\n    currentForm = otherForm;\r\n    targetForm = updatedNotesState;\r\n  }\r\n\r\n  fretboard.forEach((gtrString) => {\r\n    gtrString.forEach((fret) => {\r\n      let note = fret.dictIndex;\r\n      if (currentForm[note] && targetForm[note]) fret.display = 'common';\r\n      else if (currentForm[note] && !targetForm[note]) fret.display = 'current';\r\n      else if (!currentForm[note] && targetForm[note]) fret.display = 'target';\r\n      else fret.display = 'neutral';\r\n    })\r\n  })\r\n}\r\n\r\nexport { updateFretboardViaForm};","import { flats, sharps, both } from './helpers/notes' // consolidate checkbox data\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport '../../CSS/InputForm.css';\r\nimport Checkbox from './Checkbox'\r\nimport { FormType } from './FormTypes/FormTypes';\r\nimport { updateFretboardViaForm } from './helpers/formHelpers';\r\n\r\nconst Form = ({ fretboard, globalAccidental, form, setForm, setFretboard, currentForm, targetForm, cssAppend }:FormType) => {\r\n\r\n  const [noteLabels, setNoteLabels] = useState(flats);\r\n\r\n  // ---- this doesn't need to be evaluated each re-render, but how can we avoid?\r\n  let otherForm:boolean[];\r\n  cssAppend === 'current' ? otherForm = targetForm : otherForm = currentForm;\r\n  // ----\r\n\r\n  // is this misusing useEffect? this also doesn't need to be watched every render.\r\n  useEffect(() => {\r\n    handleAccidental();\r\n  })\r\n\r\n  const handleAccidental = () => {\r\n    switch (globalAccidental) {\r\n      case 'b':\r\n        setNoteLabels(flats);\r\n        break;\r\n      case '#':\r\n        setNoteLabels(sharps);\r\n        break;\r\n      default:\r\n        setNoteLabels(both);\r\n    }\r\n  }\r\n\r\n  const handleChange = useCallback((position:number) => {\r\n    const updatedNotesState = form.map((item, index) => index === position ? !item : item);\r\n    setForm(updatedNotesState);\r\n\r\n\r\n    let copy = [...fretboard]\r\n    updateFretboardViaForm(copy, otherForm, updatedNotesState, cssAppend);\r\n    setFretboard(copy);\r\n  }, [cssAppend, form, fretboard, setForm, setFretboard, otherForm])\r\n\r\n  return (\r\n    <form className={'input-form-' + cssAppend}>\r\n    {noteLabels.map((note, i) =>\r\n        (\r\n          <div key={i} className='checkbox-bg'>\r\n            <Checkbox\r\n              i={i}\r\n              note={note}\r\n              handleChange={handleChange}\r\n              cssAppend={cssAppend}\r\n              checked={form[i]}\r\n            />\r\n            <label htmlFor={note + cssAppend} className='checkbox-label'>{note}</label><br/>\r\n          </div>\r\n        )\r\n      )\r\n    }\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import { FretProps } from \"./FretboardTypes/FretboardTypes\"\r\n\r\nexport default function Fret({ globalAccidental, flat, sharp, both, display, toggleFret, i , j, dictIndex }: FretProps) {\r\n  return <td className={display + ` fret`} onClick={() => toggleFret(i, j)}>\r\n  {globalAccidental === 'b' ? flat[dictIndex] : globalAccidental === '#' ? sharp[dictIndex] : both[dictIndex]}\r\n  </td>\r\n}","import Fret from './Fret'\r\nimport { StringProps } from './FretboardTypes/FretboardTypes';\r\n\r\nconst GtrString = (props: StringProps) => (\r\n  <tr className='string'>\r\n  {props.gtrString.map((fret, j) =>\r\n    (\r\n      <Fret\r\n        {...props}\r\n        {...fret}\r\n        j={j}\r\n        key={j}\r\n      />\r\n    )\r\n  )}\r\n  </tr>\r\n)\r\nexport default GtrString;\r\n","import String from './GtrString'\r\nimport '../../CSS/Fretboard.css';\r\nimport { FretboardProps } from './FretboardTypes/FretboardTypes';\r\n\r\nconst Fretboard = (props: FretboardProps) => (\r\n  <table className='fretboard'>\r\n    <tbody>\r\n      {props.fretboard.map((gtrString, i) =>\r\n        (\r\n          <String\r\n            gtrString={gtrString}\r\n            i={i}\r\n            toggleFret={props.toggleFret}\r\n            globalAccidental={props.globalAccidental}\r\n            flat={props.flat}\r\n            sharp={props.sharp}\r\n            both={props.both}\r\n            key={i}\r\n          />\r\n        )\r\n      )}\r\n    </tbody>\r\n    <tfoot>\r\n      <tr className='fret-dots'>\r\n        {[0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0].map((fret, i) => {\r\n          if(fret) return <td key={i}>{'•'}</td>\r\n          if(i === 12) return <td key={i}>{'••'}</td>\r\n          else return <td key={i}></td>\r\n        })}\r\n      </tr>\r\n    </tfoot>\r\n  </table>\r\n)\r\n\r\nexport default Fretboard;","export default function createFretboard(tuning: number[]) {\r\n  return tuning.map(root => createString(root));\r\n}\r\n\r\nfunction createString(startNote: number) {\r\n  let guitarString = [];\r\n  let i = startNote;\r\n\r\n  while(guitarString.length <= 12) {\r\n    if(i === 12) {\r\n      i = 0;\r\n    }\r\n\r\n    guitarString.push({display: 'neutral', dictIndex: i});\r\n\r\n    i += 1;\r\n  }\r\n  return guitarString;\r\n}\r\n\r\n\r\n","type dict = {[key: number]: string};\r\n\r\nexport const sharp:dict = {\r\n  0: 'C',\r\n  1: 'C#',\r\n  2: 'D',\r\n  3: 'D#',\r\n  4: 'E',\r\n  5: 'F',\r\n  6: 'F#',\r\n  7: 'G',\r\n  8: 'G#',\r\n  9: 'A',\r\n  10: 'A#',\r\n  11: 'B',\r\n}\r\n\r\nexport const flat:dict = {\r\n  0: 'C',\r\n  1: 'Db',\r\n  2: 'D',\r\n  3: 'Eb',\r\n  4: 'E',\r\n  5: 'F',\r\n  6: 'Gb',\r\n  7: 'G',\r\n  8: 'Ab',\r\n  9: 'A',\r\n  10: 'Bb',\r\n  11: 'B',\r\n}\r\n\r\nexport const both:dict = {\r\n  0: 'C',\r\n  1: 'C#/Db',\r\n  2: 'D',\r\n  3: 'D#/Eb',\r\n  4: 'E',\r\n  5: 'F',\r\n  6: 'F#/Gb',\r\n  7: 'G',\r\n  8: 'G#/Ab',\r\n  9: 'A',\r\n  10: 'A#/Bb',\r\n  11: 'B',\r\n}\r\n\r\n//[4, 11, 7, 2, 9, 4]\r\n","import { returnsCommonTuningForStringQty } from './helpers/defaultTunings';\r\nimport { updateFretboardViaForm } from './helpers/formHelpers';\r\nimport createFretboard from '../fretboard/helpers/createFretboard';\r\nimport '../../CSS/StringQtySelect.css';\r\nimport { StringQtyTypes } from './FormTypes/FormTypes';\r\n\r\n\r\nconst StringQtySelect = ({ setTuning, setFretboard, currentForm, targetForm, tuning }:StringQtyTypes) => {\r\n\r\n  let standardTuning = [4, 11, 7, 2, 9, 4]\r\n\r\n  const changeStringAmount = (event:React.ChangeEvent<HTMLSelectElement>) => {\r\n    let newTuning = returnsCommonTuningForStringQty(event.currentTarget.value) || tuning || standardTuning;\r\n    setTuning(newTuning);\r\n    let newFretboard = createFretboard(newTuning);\r\n    updateFretboardViaForm(newFretboard, targetForm, currentForm, 'current')\r\n    setFretboard(newFretboard);\r\n  }\r\n\r\n  return (\r\n  <div className='string-qty-container'>\r\n    <label htmlFor=\"String Amount\" className='string-qty-label'>{'#'}</label>\r\n    <select name=\"String Amount\" className='string-qty-select' onChange={(e) => changeStringAmount(e)} defaultValue={6}>\r\n      <option value={4}>{4}</option>\r\n      <option value={5}>{5}</option>\r\n      <option value={6}>{6}</option>\r\n      <option value={7}>{7}</option>\r\n      <option value={8}>{8}</option>\r\n      <option value={9}>{9}</option>\r\n    </select>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default StringQtySelect;","const returnsCommonTuningForStringQty = (number:string) => {\r\n  switch(parseInt(number)) {\r\n    case 4:\r\n      return [7, 2, 9, 4];\r\n    case 5:\r\n      return [7, 2, 9, 4, 11];\r\n    case 6:\r\n      return [4, 11, 7, 2, 9, 4];\r\n    case 7:\r\n      return [4, 11, 7, 2, 9, 4, 11];\r\n    case 8:\r\n      return [4, 11, 7, 2, 9, 4, 11, 6];\r\n    case 9:\r\n      return [4, 11, 7, 2, 9, 4, 11, 6, 1];\r\n  }\r\n}\r\n\r\nexport { returnsCommonTuningForStringQty }","import { SelectNoteProps } from \"./TuningModalTypes/TuningModalTypes\";\r\n\r\nconst SelectNote = ({currentNote, labels, position, handleTuningChange}:SelectNoteProps) => {\r\n\r\n  return (\r\n    <select value={currentNote} onChange={(e) => handleTuningChange(e, position)} className='select-note'>\r\n      {Array.from(Array(12).keys()).map((num) => {\r\n        return (\r\n          <option value={num} key={`string ${position}, ${labels[num]}`}>{labels[num]}</option>\r\n        )\r\n      })}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default SelectNote;","import React, { useState, useEffect } from 'react';\r\nimport SelectNote from './SelectNote';\r\nimport '../../CSS/TuningModal.css';\r\nimport { TuningModalProps } from './TuningModalTypes/TuningModalTypes';\r\nimport { flats, sharps, both } from '../form/helpers/notes';\r\nimport createFretboard from '../fretboard/helpers/createFretboard';\r\nimport { updateFretboardViaForm } from '../form/helpers/formHelpers';\r\n\r\nconst TuningModal = ({ handleClose, show, tuning, globalAccidental, setTuning, setFretboard, currentForm, targetForm }:TuningModalProps) => {\r\n  const showHideClassName = show ? \"tuning-modal display-block\" : \"tuning-modal display-none\";\r\n\r\n  const [accidentalLabels, setAccidentalLabels] = useState<string[]>(flats);\r\n\r\n  useEffect(() => {\r\n    handleAccidental();\r\n  })\r\n\r\n  const handleAccidental = () => {\r\n    switch (globalAccidental) {\r\n      case 'b':\r\n        setAccidentalLabels(flats);\r\n        break;\r\n      case '#':\r\n        setAccidentalLabels(sharps);\r\n        break;\r\n      default:\r\n        setAccidentalLabels(both);\r\n    }\r\n  }\r\n\r\n  const handleTuningChange = (event:React.ChangeEvent<HTMLSelectElement>, position:number) => {\r\n    let copy = [...tuning];\r\n    copy[position] = parseInt(event.target.value);\r\n    setTuning(copy);\r\n    let newFretboard = createFretboard(copy);\r\n    updateFretboardViaForm(newFretboard, targetForm, currentForm, 'current');\r\n    setFretboard(newFretboard);\r\n  }\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className=\"tuning-modal-main\">\r\n        {tuning.map((note, i) => {\r\n          return (\r\n            <SelectNote\r\n              currentNote={note}\r\n              labels={accidentalLabels}\r\n              position={i}\r\n              handleTuningChange={handleTuningChange}\r\n              key={`${i}`}\r\n            />\r\n          )\r\n        })}\r\n        <button onClick={() => handleClose()}>{'X'}</button>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TuningModal;","import { ChangeEvent, useState } from 'react';\r\nimport SaveModalTypes from './SaveModalTypes/SaveModalTypes';\r\nimport '../../CSS/SaveModal.css';\r\n\r\nconst SaveModal = ({save, load, deleteData, handleClose, show, saveFileList}:SaveModalTypes) => {\r\n  const showHideClassName = show ? \"save-modal display-block\" : \"save-modal display-none\";\r\n  const [saveNameText, setSaveName] = useState<string>('');\r\n  const [selectedSaveFile, setSelectedSaveFile] = useState<string>(saveFileList[0])\r\n\r\n  let disable;\r\n  saveFileList.length > 0 ? disable = false : disable = true;\r\n\r\n  const handleSaveNameText = (event:ChangeEvent<HTMLInputElement>) => {\r\n    let newText = event.target.value;\r\n    setSaveName(newText);\r\n  }\r\n\r\n  const handleSaveFileSelect = (event:React.ChangeEvent<HTMLSelectElement>) => {\r\n    let name = event.target.value;\r\n    setSelectedSaveFile(name);\r\n  }\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n    <section className=\"save-modal-main\">\r\n      <div>\r\n        <select className='save-select-menu' disabled={disable} value={selectedSaveFile} onChange={(e) => handleSaveFileSelect(e)}>\r\n          {saveFileList.map((name) => {\r\n            return (\r\n              <option value={name} key={name}>{name}</option>\r\n            )\r\n          })}\r\n        </select>\r\n        <button onClick={() => load(selectedSaveFile)}>Load</button>\r\n        <button onClick={() => {deleteData(selectedSaveFile); setSelectedSaveFile(saveFileList[0]);}}>Delete</button>\r\n      </div>\r\n      <div>\r\n        <input className='save-name-input' type='text' value={saveNameText} onChange={(e) => handleSaveNameText(e)}></input>\r\n        <button onClick={() => {save(saveNameText); setSelectedSaveFile(saveNameText)}}>Save</button>\r\n      </div>\r\n      <button onClick={() => handleClose()}>{'X'}</button>\r\n    </section>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default SaveModal;","import './CSS/App.css';\r\nimport { useState } from 'react';\r\nimport InputForm from './components/form/InputForm'\r\nimport Fretboard from './components/fretboard/Fretboard';\r\nimport createFretboard from './components/fretboard/helpers/createFretboard';\r\nimport { flat, sharp, both } from './components/fretboard/helpers/stringDict';\r\nimport { updateFretboardViaToggle } from './components/appHelpers/appHelpers';\r\nimport { GtrString } from './components/AppTypes';\r\nimport StringQtySelect from './components/form/StringQtySelect';\r\nimport TuningModal from './components/TuningModal/TuningModal';\r\nimport SaveModal from './components/SaveModal/SaveModal';\r\n\r\nfunction App() {\r\n  const [tuning, setTuning] = useState<number[]>([4, 11, 7, 2, 9, 4]);\r\n  const [fretboard, setFretboard] = useState<GtrString[][]>(createFretboard([4, 11, 7, 2, 9, 4]));\r\n  const [globalAccidental, setGlobalAccidental] = useState<string>('b');\r\n  const [currentForm, setCurrent] = useState<boolean[]>(new Array(12).fill(false));\r\n  const [targetForm, setTarget] = useState<boolean[]>(new Array(12).fill(false));\r\n  const [showTuningModal, setShowTuningModal] = useState<boolean>(false);\r\n  const [showSaveModal, setShowSaveModal] = useState<boolean>(false);\r\n  const [saveFileList, setSaveFileList] = useState<string[]>(Object.keys(localStorage).filter(item => item !== 'loglevel'));\r\n\r\n  const toggleFret = (string:number, fret:number) => {\r\n    let copy = [...fretboard];\r\n    updateFretboardViaToggle(copy, string, fret);\r\n    setFretboard(copy);\r\n  }\r\n\r\n  const switchAccidental = () => {\r\n    switch(globalAccidental) {\r\n      case 'b':\r\n        setGlobalAccidental('#');\r\n        break;\r\n      case '#':\r\n        setGlobalAccidental('*');\r\n        break;\r\n      case '*':\r\n        setGlobalAccidental('b');\r\n    }\r\n  }\r\n\r\n  const save = (name:string) => {\r\n    if (name.length > 32 || name.length <= 0 || Object.keys(localStorage).includes('name')) {\r\n      alert('1-32 char, or name already exists');\r\n    } else {\r\n      let saveObject = {\r\n        fretboard: fretboard,\r\n        tuning: tuning,\r\n        currentForm: currentForm,\r\n        targetForm: targetForm,\r\n      };\r\n      let saveData = JSON.stringify(saveObject)\r\n      localStorage.setItem(name, saveData);\r\n      setSaveFileList(Object.keys(localStorage).filter(item => item !== 'loglevel'));\r\n    }\r\n  }\r\n\r\n  const load = (name:string) => {\r\n    let loadData = JSON.parse(localStorage.getItem(name) || '');\r\n    let { fretboard, tuning, currentForm, targetForm } = loadData;\r\n    setFretboard(fretboard);\r\n    setTuning(tuning);\r\n    setCurrent(currentForm);\r\n    setTarget(targetForm);\r\n  }\r\n\r\n  const deleteData = (name:string) => {\r\n    // localStorage.clear();\r\n    localStorage.removeItem(name);\r\n    setSaveFileList(Object.keys(localStorage).filter(item => item !== 'loglevel'));\r\n  }\r\n\r\n  const reset = () => {\r\n    let resetArray = new Array(12).fill(false);\r\n    setCurrent(resetArray);\r\n    setTarget(resetArray);\r\n    setFretboard(createFretboard(tuning));\r\n  }\r\n\r\n  const toggleTuningModal = () => {\r\n    setShowTuningModal(!showTuningModal);\r\n  }\r\n\r\n  const toggleSaveModal = () => {\r\n    setShowSaveModal(!showSaveModal);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Key Frame Guitar</h3>\r\n      <h5>I built this app to help students of the guitar focus on navigating a specific chord change. I hope that you find it useful. - Leslie</h5>\r\n      <Fretboard\r\n        fretboard={fretboard}\r\n        globalAccidental={globalAccidental}\r\n        flat={flat}\r\n        sharp={sharp}\r\n        both={both}\r\n        toggleFret={toggleFret}\r\n      />\r\n      <div className='forms-container'>\r\n        <InputForm\r\n          globalAccidental={globalAccidental}\r\n          form={currentForm}\r\n          setForm={setCurrent}\r\n          cssAppend={'current'}\r\n          fretboard={fretboard}\r\n          currentForm={currentForm}\r\n          targetForm={targetForm}\r\n          setFretboard={setFretboard}\r\n        />\r\n        <div className=\"vl\"></div>\r\n        <InputForm\r\n          globalAccidental={globalAccidental}\r\n          form={targetForm}\r\n          setForm={setTarget}\r\n          cssAppend={'target'}\r\n          fretboard={fretboard}\r\n          currentForm={currentForm}\r\n          targetForm={targetForm}\r\n          setFretboard={setFretboard}\r\n        />\r\n        <div className='tools-container'>\r\n          <StringQtySelect\r\n             tuning={tuning}\r\n            setFretboard={setFretboard}\r\n            fretboard={fretboard}\r\n            currentForm={currentForm}\r\n            targetForm={targetForm}\r\n            setTuning={setTuning}\r\n          />\r\n          <br/>\r\n          <button className='acc-button button' onClick={switchAccidental}>{'♭ ♯ ✶'}</button>\r\n          <br/>\r\n          <button className='show-save-modal-button' onClick={toggleSaveModal}>{'🖫'}</button>\r\n          <br/>\r\n          <button className='show-tuning-button' onClick={toggleTuningModal}>{'⑂'}</button>\r\n          <br/>\r\n          <button onClick={reset} className='reset-button button'>RESET</button>\r\n        </div>\r\n      </div>\r\n      <TuningModal\r\n        handleClose={toggleTuningModal}\r\n        setTuning={setTuning}\r\n        setFretboard={setFretboard}\r\n        show={showTuningModal}\r\n        tuning={tuning}\r\n        globalAccidental={globalAccidental}\r\n        currentForm={currentForm}\r\n        targetForm={targetForm}\r\n      />\r\n      <SaveModal\r\n        handleClose={toggleSaveModal}\r\n        save={save}\r\n        load={load}\r\n        deleteData={deleteData}\r\n        show={showSaveModal}\r\n        saveFileList={saveFileList}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","type GtrString = {\r\n  display: string\r\n  dictIndex: number\r\n}\r\n\r\n\r\n\r\nconst updateFretboardViaToggle = (fretboard:Array<GtrString[]>, string:number, fret:number) => {\r\n  switch(fretboard[string][fret].display) {\r\n    case 'neutral':\r\n      fretboard[string][fret].display = 'current';\r\n      break;\r\n    case 'current':\r\n      fretboard[string][fret].display = 'target';\r\n      break;\r\n    case 'target':\r\n      fretboard[string][fret].display = 'common';\r\n      break;\r\n    case 'common':\r\n      fretboard[string][fret].display = 'neutral';\r\n      break;\r\n  }\r\n}\r\n\r\nexport { updateFretboardViaToggle };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}